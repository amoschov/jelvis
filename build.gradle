plugins {
    id 'java'
    id 'scala'
    id 'jacoco'
    id 'maven'
    id 'signing'
    id 'com.github.hierynomus.license' version '0.11.0'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

group = 'com.github.lukaszbudnik.jelvis'
archivesBaseName = 'jelvis'
version = '1.3.0'

repositories {
    mavenCentral()

    maven {
        url 'http://repository.apache.org/content/repositories/snapshots'
    }
}

jacoco {
    toolVersion = "0.7.2.201409121644"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

test {
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
}

dependencies {
    compile 'org.apache.logging.log4j:log4j-core:2.1'
    compile 'org.scala-lang:scala-library:2.11.5'

    testCompile 'org.specs2:specs2-core_2.11:2.4.16'
    testCompile 'org.specs2:specs2-junit_2.11:2.4.16'
    testCompile 'org.apache.logging.log4j:log4j-slf4j-impl:2.1'
    testCompile 'junit:junit:4.12'
}

license {
    header project.file('HEADER')

    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.name = 'Łukasz Budnik'
    ext.email = 'lukasz.budnik@gmail.com'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task testJar(type: Jar) {
    classifier = 'tests'
    from sourceSets.test.allSource
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task printTestErrors {
    def xmlReports = new File("${buildDir}/test-results")
    if (xmlReports.exists()) {
        xmlReports.eachFileMatch(groovy.io.FileType.FILES, ~/TEST\-.*\.xml/) {
            def testsuite = new groovy.util.XmlParser().parse(it)
            testsuite.testcase.findAll {
                it.failure.size() > 0
            }.each {
                println it
            }
        }
    }
}

artifacts {
    archives javadocJar, sourcesJar, testJar
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

def deployUsername = hasProperty('ossrhUsername') ? ossrhUsername : System.getenv('DEPLOY_USERNAME')

def deployPassword = hasProperty('ossrhPassword') ? ossrhPassword : System.getenv('DEPLOY_PASSWORD')


uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: deployUsername, password: deployPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: deployUsername, password: deployPassword)
            }

            pom.project {
                name 'jelvis'
                packaging 'jar'
                description 'Elvis operator for Java 8 and Scala'
                url 'https://github.com/lukaszbudnik/jelvis'

                scm {
                    connection 'scm:git:git@github.com:lukaszbudnik/jelvis.git'
                    developerConnection 'scm:git:git@github.com:lukaszbudnik/jelvis.git'
                    url 'git@github.com:lukaszbudnik/jelvis.git'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'lukaszbudnik'
                        name 'Łukasz Budnik'
                        email 'lukasz.budnik@gmail.com'
                    }
                }
            }
        }
    }
}
